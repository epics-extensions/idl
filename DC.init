;*************************************************************************
; Copyright (c) 2002 The University of Chicago, as Operator of Argonne
; National Laboratory.
; Copyright (c) 2002 The Regents of the University of California, as
; Operator of Los Alamos National Laboratory.
; This file is distributed subject to a Software License Agreement found
; in the file LICENSE that is included with this distribution. 
;*************************************************************************
;  DC.init (R3.4.4.2)

np = 4
nd = n_elements(detname)  ;85 
npd = np+nd
PI = 'P'+strtrim(indgen(4)+1,2)
DI = detname
if n_elements(DI) lt 71 then $
   DI = 'D'+ [strtrim(indgen(9)+1,2),'A','B','C','D','E','F', $
                '01','02','03','04','05','06','07','08','09', $
                strtrim(indgen(61)+10,2)]

DB_HD = { $
        Ver     : '5.19', $
	di	: DI, $
	pi	: PI, $  ;'P'+lis0(0:3), $
	npd	: npd, $
	rank	: 0, $
	d_def	: make_array(nd,3,/int), $   ; up to 3D
	p_def	: make_array(4,3,/int),   $   ; up to 3D
	pvname	: make_array(npd,3,value=string(replicate(32b,30))), $
	pvdesc	: make_array(npd,3,value=string(replicate(32b,40))), $
	pvunit	: make_array(npd,3,value=string(replicate(32b,40))) $
	}

  widget_ids = {                  $ 
      base        : MAIN13_1,     $
      menubar_base: BASE68,       $
      status_base : BASE69,       $
      plot_base   : BASE61, $
      axis_base   : BASE144,      $
      menusetup_base: SETUPOPTIONSMENU, $
      menuplot_base: PLOTOPTIONSMENU, $
      versID	  : detvers,     $
      file	  : PDMENU127,    $
      trashcan    : CATCHER_FILE,    $
;      viewdata    : PDMENU_VDATA,  $
      pv_stat     : FIELD141,     $
      rept_base   : BASE140,      $
      wf_select   : BGROUP145,    $
;	vers  	  : [BGROUP145,BGROUP145_1], $
	scantype  : scantype, $
      plot_wid    : DRAW61,       $
      plot_area   : DRAW61_Id,    $
      pickpan     : pick_panimage, $
      pickimin    : pick_imin, $
      scanH    : pick_scanH, $
      panwin      : -1,    $
      summary_base: 0L,      $
      terminal    : 0L,    $
      statistic   : 0L    $
  }

if n_elements(w_plotspec_id) eq 0 then $
w_plotspec_id = { $
	color : 1, $     ;  0 no color curve, 1 color curve 
        type:   0, $
	solid: 1, $ 		; 1 solid line only
        log:    0, $   ; 0 - linear, 1 - log, 2 - linear, y>0
        grid:   0, $
        mode:   1, $		; default is viewing mode
	goto_pv: ['','','',''], $
        x_axis_u :   0, $
        autosave:       0, $
	scan: 0,$
        errbars: 0, $
	opened: 0, $
	realtime: 1, $
	itime: 1, $
	dtime: .2, $   ; periodical realtime interval, $
        xcord: 0, $
	seqno: 0, $
	statistic: 0, $
	xticklen: 0.04, $
	yticklen: 0.02, $
	gridstyle: 0, $
	colorV: make_array(npd,/Long), $ 
	colorI: make_array(npd,/Long,value=!d.n_colors-2) $ 
        }

   LOADCT,39
   colorI = lonarr(npd) 
   getLineColors,colorI,v=colorV
   w_plotspec_id.colorI = colorI
   w_plotspec_id.colorV = colorV

   scanData  =  {                 $
dim: 0, $   ; dimension
debug : 0,    $   ;  0 normal runing mode, 1 debug mode
option : 0, $    ; 0 ->view mode only, 1 ->scan/view both allowed
nosave: 0, $   ; 0 autosave on, 1 no automatic save used by command line
      version     : 'IOC_DC', $
      release     : '(DC R3.4.4.2)', $
	prefix	: '', $
	scanH	: 0, $
	nd	: nd, $
	npd	: npd, $
	DI	: DI, $  	;make_array(85,/string), $
	PI	: PI, $    ;'P'+lis0(0:3), $
	xdescs	: make_array(4,/string), $
	ydescs	: make_array(85,/string), $
	zdescs	: make_array(85,/string), $
	reverse	: 0, $    set to 1 if 1D scan in negative direction
	fastscan: 1, $   1-read from mda file, 0 - from CA
	bypass3d  : 1, $   1 bypass returning 3D data array 
	pickDet   : -1, $  no 3D data returned
	suffix	  : '.mda',           $ for .scan or  .mda 
	zoom:   0 ,  $  default  without zoom
      pv          : '',           $
      pvconfig    : ['',''],           $
      pvfound     : -1, 	  $  indicator for pv found or not found
      lastDet     : [nd,1,1],           $  initial last detector
      home	  : '', $
      fileno	  : 0, 		  $  current scan file number
      filemax	  : 1, 		  $  max scan file number
      tblfile	  : 'catch1d.tbl', $ 
      maxenv 	  : 500, $
      config      : 'DC.config', $
      imgfile	  : 'DCV2D.image.xdr', $
      path  	  : '', $
      outpath     : '', $
      trashcan    : 'Undefined', $
      code        : 'G', $
      format      : '18.8', $
      req_npts    : 100,          $
      act_npts    : 0,          $
      readin_npts    : 0,          $
      num_pos	  : 4, 		  $  max no of pos allowed   
      num_det     : 85, 	  $  max no of detectors allowed 
      wf_sel	  : make_array(89,/int), $
	id_def	  : make_array(89,/int), $
	p_def	  : [0,0,0,0], $      ; positioner def id
      	px : ptr_new(/ALLOCATE_HEAP), $ FLTARR(4000), $
	pa : ptr_new(/ALLOCATE_HEAP), $ Make_array(4000,4,/double), $
	da : ptr_new(/ALLOCATE_HEAP), $ FLTARR(4000,nd), $	
      lastPlot    : 1,   $   ; <0 not plot data, 0 userscale, 1 autoscale 
      scanno	  : 0,            $   ; current plot no 
      startno	  : 0,            $   ; start no when catch1d is brought up
      refno       : 0,            $   ; environments ref no saved in data   
      showlist	  : 0,            $   ; list life scan data ?
      readpv      : 0, 		    $     ; if 1 read from scan_pvnames 
      pvfile	  : 'scan_pvnames', $     ; list of monitor pvnames 
      nonames	  : 0, $
      plotspec    : w_plotspec_id, $
      realtime    : 0, 	  	  $   ; realtime scan monitor indicator 
; add 2D scan parameters here
      wtime 	  : .02,  $   ;  allow time for multim-dim  mda save finished 
      tmpName	: '.tmpName', $ ; temp name used for detname assignment
      scanno_2d	  : 0,            $   ; current 2D scan no 
      image        : 1, $		; default 60x60 image 
      image_width  : 60, $
      image_height : 60, $
	imin	   : 0, $		; pick imin for image display
	sel_list   : intarr(nd), $	; panimage sublist
	sel_id 	   : 8, $		; 0 - D01-D10, 8 - All 
	sel_changed: 0, $		; changed sublist
	last_line  : 0, $		; last 2d image line
	dstart     : 15, $		; D01 start seq # 
	sublist    : strarr(11,2), $    ; [l123,l123_1], $    
	svers	   : 0, $  		; 0-85 det, 1- 70 det
	new        : 0, $  		; 1 for 5.19 or later
      y_pv	: '', $
      y_scan 	: 0, $		; if 1 2D scan is goring on
      y_value   : 0., $		; y value for 2D scan
      y_req_npts    : 1,          $
      y_act_npts    : 0,          $
      x_dpt 	: make_array(nd,/INT,value=1), $ ; data dim for X detectors
      y_dpt 	: make_array(nd,/INT,value=1), $ ; data dim for Y detectors
      x_dtype 	: make_array(nd,/INT,value=4), $ ; float for X detectors 
      y_dtype 	: make_array(nd,/INT,value=4), $ ; float for Y detectors
      y_cur_pt  : 0, 	$  ; y index no from IOC
      y_seqno   : 0 	$  ; y dim scan seqno
   }

found = findfile('catch1d.tbl')
if found(0) eq '' then $
scanData.tblfile='/usr/local/epics/extensions/idllib/catch1d.tbl' 

   scanData.sublist(*,0) = l123(*)
   scanData.sublist(*,1) = l123_1(*)

   WIDGET_CONTROL, widget_ids.wf_select, SET_VALUE = [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1]

   WIDGET_CONTROL, widget_ids.wf_select, GET_VALUE = wf_sel
   scanData.wf_sel = wf_sel(0:scanData.npd-1)

; init w_plotspec

if n_elements(w_plotspec_array) eq 0 then $
w_plotspec_saved = make_array(6,/string,value=string(replicate(32b,60)))

if n_elements(w_plotspec_array) eq 0 then $
w_plotspec_array = make_array(6,/string,value=string(replicate(32b,60)))
w_plotspec_array(3) = ''

if n_elements(w_plotspec_limits) eq 0 then $
w_plotspec_limits = make_array(4,/float)
	w_plotspec_limits = [0., 100., 0., 100.]

; init w_viewscan

if n_elements(w_viewscan_id) eq 0 then $
w_viewscan_id = { $
	file: '', $
        type: 0, $
        unit: 0, $
        seqno: 0, $
        maxno: 0 $
;	size: 0L, $
;        fptr: make_array(10000,/long) $
        }

; realtime init

if n_elements(realtime_id) eq 0 then $
realtime_id = { $
        ind     : 0,    $
        no      : 0, $
        mpts    : 0, $
	fly	: 0, $
	def     : make_array(scanData.num_det+4,/int), $     ; 1 PV defined, 2 time defined
	axis 	: 0, $
	xmin	: 0., $
	xmax	: 0., $
	ymin	: 0., $
	ymax	: 0. $
	}

; scan field init

if n_elements(field_name) eq 0 then begin

x1 = [ $
        'NPTS Number of Points               : ', $
        'P1PV Positioner # 1 PV Name         : ', $
        'R1PV Readback   # 1 PV Name         : ', $
        'P1SM Positioner # 1 Step Mode       : ', $
        'P2PV Positioner # 2 PV Name         : ', $
        'R2PV Readback   # 2 PV Name         : ', $
        'P1SM Positioner # 2 Step Mode       : ', $
        'P3PV Positioner # 3 PV Name         : ', $
        'R3PV Readback   # 3 PV Name         : ', $
        'P3SM Positioner # 3 Step Mode       : ', $
        'P4PV Positioner # 4 PV Name         : ', $
        'R4PV Readback   # 4 PV Name         : ', $
        'P4SM Positioner # 4 Step Mode       : ', $
        'D01PV Data Detector # 01 PV Name      : ', $
        'D02PV Data Detector # 02 PV Name      : ', $
        'D03PV Data Detector # 03 PV Name      : ', $
        'D04PV Data Detector # 04 PV Name      : ', $
        'D05PV Data Detector # 05 PV Name      : ', $
        'D06PV Data Detector # 06 PV Name      : ', $
        'D07PV Data Detector # 07 PV Name      : ', $
        'D08PV Data Detector # 08 PV Name      : ', $
        'D09PV Data Detector # 09 PV Name      : ', $
        'D10PV Data Detector # 10 PV Name      : ', $
        'D11PV Data Detector # 11 PV Name      : ', $
        'D12PV Data Detector # 12 PV Name      : ', $
        'D13PV Data Detector # 13 PV Name      : ', $
        'D14PV Data Detector # 14 PV Name      : ', $
        'D15PV Data Detector # 15 PV Name      : ', $
        'T1PV Trigger # 1 PV Name            : ', $
        'T1CD Trigger # 1 Command            : ', $
        'T2PV Trigger # 2 PV Name            : ', $
        'T2CD Trigger # 2 Command            : ', $
        'T3PV Trigger # 3 PV Name            : ', $
        'T3CD Trigger # 3 Command            : ', $
        'T4PV Trigger # 4 PV Name            : ', $
        'T4CD Trigger # 4 Command            : ' $
	]

y1 = [ $
        '.NPTS', $
        '.P1PV', '.R1PV', '.P1SM', $
        '.P2PV', '.R2PV', '.P2SM', $
        '.P3PV', '.R3PV', '.P3SM', $
        '.P4PV', '.R4PV', '.P4SM', $
        '.D01PV', '.D02PV', '.D03PV', '.D04PV', '.D05PV', '.D06PV', '.D07PV', $
        '.D08PV', '.D09PV', '.D10PV', '.D11PV', '.D12PV', '.D13PV', '.D14PV', $
        '.D15PV', '.T1PV', '.T1CD', '.T2PV', '.T2CD', $
	'.T3PV', '.T3CD', '.T4PV', '.T4CD' $
        ]

field_name = y1
field_max = n_elements(field_name)
field_label_array = x1
 
field_name_array = make_array(field_max,/string,value=string(replicate(32b,30)))
field_value = make_array(field_max,/string,value=string(replicate(32b,40)))

end

x1 = 0 
y1 = 0

capendio,time=3., list_time=5.
capendevent,time=0.001

